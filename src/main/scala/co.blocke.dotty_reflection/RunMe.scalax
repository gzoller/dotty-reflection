package co.blocke.dotty_reflection
import impl._


trait Thing[A, B] { val a: A; val b: B }
case class AThing[Y, X](a: X, b: Y) extends Thing[X, Y]


object RunMe extends App:

  val c1 = Map( (AThing("a",3), AThing("b",4)) -> "foom")
  val r = RType.inTermsOf[Map[(Thing[String,Int],Thing[String,Int]),String]](c1.getClass)
  println(r)

  val r2 = RType.of[Map[(Thing[String,Boolean],Thing[String,Boolean]),String]]
  println(r2)

  println("done.")
